{
	"name": "UpdateCustomerDimesion",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerSource",
						"type": "DatasetReference"
					},
					"name": "SourceDB"
				},
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "Sink"
				}
			],
			"transformations": [
				{
					"name": "CreateCustomerHash"
				},
				{
					"name": "Exists"
				},
				{
					"name": "LookupCustomerID"
				},
				{
					"name": "SetDates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> SourceDB",
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> DimCustomer",
				"SourceDB derive(HashKey = sha2(256, iifNull(Title,'')+FirstName\r",
				"    +iifNull(MiddleName, '')+LastName\r",
				"    +iifNull(Suffix, '')\r",
				"    +iifNull(CompanyName, '')\r",
				"    +iifNull(SalesPerson, '')\r",
				"    +iifNull(EmailAddress, '')\r",
				"    +iifNull(Phone, '')\r",
				"    )) ~> CreateCustomerHash",
				"CreateCustomerHash, DimCustomer exists(CreateCustomerHash@HashKey == DimCustomer@HashKey,",
				"     negate:true,",
				"     broadcast: 'auto')~> Exists",
				"Exists, DimCustomer lookup(SourceDB@CustomerID == DimCustomer@CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCustomerID",
				"LookupCustomerID derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(),{InsertedDate}),",
				"          ModifiedDate = currentTimestamp()) ~> SetDates",
				"SetDates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Sink"
			]
		}
	}
}